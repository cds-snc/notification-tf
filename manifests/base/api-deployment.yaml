apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api 
  name:  api
  namespace: notification-canada-ca
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api 
  template:
    metadata:
      labels:
        app: api
    spec:
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $(POSTGRES_HOST); do echo waiting for postgres; sleep 2; done;",
            ]
        - name: migrate-db
          image: api
          env:
            - name: NOTIFY_ENVIRONMENT
              value: '$(ENVIRONMENT)'
            - name: SQLALCHEMY_DATABASE_URI
              value: '$(POSTGRES_SQL)'
          command:
            [
              "sh",
              "-c",
              "flask db upgrade",
            ]
      containers:
        - image: api
          imagePullPolicy: Always
          name: api 
          env:
            - name: ADMIN_BASE_URL
              value: https://$(BASE_DOMAIN)
            - name: NOTIFY_EMAIL_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: NOTIFY_ENVIRONMENT
              value: '$(ENVIRONMENT)'
            - name: SQLALCHEMY_DATABASE_URI
              value: '$(POSTGRES_SQL)'
            - name: STATSD_HOST
              value: cloudwatch-agent-statsd.notification-canada-ca.svc.cluster.local
            - name: FIDO2_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: DOCUMENT_DOWNLOAD_API_HOST
              value: 'http://document-download-api.notification-canada-ca.svc.cluster.local:7000'
            - name: NOTIFICATION_QUEUE_PREFIX
              value: 'eks-notification-canada-ca'
            - name: REDIS_URL
              value: redis://redis.notification-canada-ca.svc.cluster.local:6379
            - name: REDIS_ENABLED
              value: '1'
          resources: {}
          ports:
            - containerPort: 6011
          readinessProbe:
            httpGet:
              path: /
              port: 6011
            initialDelaySeconds: 3
            periodSeconds: 3
          livenessProbe:
            httpGet:
              path: /
              port: 6011
            initialDelaySeconds: 3
            periodSeconds: 3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
