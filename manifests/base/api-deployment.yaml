apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api 
  name:  api
  namespace: notification-canada-ca
spec:
  replicas: 6
  selector:
    matchLabels:
      app: api 
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api
    spec:
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $(POSTGRES_HOST); do echo waiting for postgres; sleep 2; done;",
            ]
        - name: migrate-db
          image: api
          env:
            - name: ADMIN_BASE_URL
              value: https://$(BASE_DOMAIN)
            - name: ADMIN_CLIENT_SECRET
              value: '$(ADMIN_CLIENT_SECRET)'
            - name: AWS_REGION
              value: '$(AWS_REGION)'
            - name: AWS_ACCESS_KEY_ID
              value: '$(AWS_ACCESS_KEY_ID)'
            - name: AWS_SECRET_ACCESS_KEY
              value: '$(AWS_SECRET_ACCESS_KEY)'
            - name: AWS_ROUTE53_ZONE
              value: '$(AWS_ROUTE53_ZONE)'
            - name: AWS_SES_REGION
              value: '$(AWS_SES_REGION)'
            - name: AWS_SES_SMTP
              value: '$(AWS_SES_SMTP)'
            - name: AWS_SES_ACCESS_KEY
              value: '$(AWS_SES_ACCESS_KEY)'
            - name: AWS_SES_SECRET_KEY
              value: '$(AWS_SES_SECRET_KEY)'
            - name: DANGEROUS_SALT
              value: '$(DANGEROUS_SALT)'
            - name: DOCUMENT_DOWNLOAD_API_HOST
              value: 'http://document-download-api.notification-canada-ca.svc.cluster.local:7000'
            - name: FIDO2_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: FLASK_APP
              value: application.py
            - name: MLWR_HOST
              value: '$(MLWR_HOST)'
            - name: MLWR_USER
              value: '$(MLWR_USER)'
            - name: MLWR_KEY
              value: '$(MLWR_KEY)'
            - name: NOTIFY_EMAIL_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: NOTIFY_ENVIRONMENT
              value: '$(ENVIRONMENT)'
            - name: NOTIFICATION_QUEUE_PREFIX
              value: 'eks-notification-canada-ca'
            - name: REDIS_URL
              value: redis://redis.notification-canada-ca.svc.cluster.local:6379
            - name: REDIS_ENABLED
              value: '1'
            - name: SECRET_KEY
              value: '$(SECRET_KEY)'
            - name: SENDGRID_API_KEY
              value: '$(SENDGRID_API_KEY)'
            - name: SQLALCHEMY_DATABASE_URI
              value: '$(POSTGRES_SQL)'
            - name: STATSD_HOST
              value: cloudwatch-agent-statsd.notification-canada-ca.svc.cluster.local
            - name: TWILIO_ACCOUNT_SID
              value: '$(TWILIO_ACCOUNT_SID)'
            - name: TWILIO_AUTH_TOKEN
              value: '$(TWILIO_AUTH_TOKEN)'
            - name: TWILIO_FROM_NUMBER
              value: '$(TWILIO_FROM_NUMBER)'
          command:
            [
              "sh",
              "-c",
              "flask db upgrade",
            ]
      containers:
        - image: api
          imagePullPolicy: Always
          name: api 
          env:
            - name: ADMIN_BASE_URL
              value: https://$(BASE_DOMAIN)
            - name: ADMIN_CLIENT_SECRET
              value: '$(ADMIN_CLIENT_SECRET)'
            - name: API_HOST_NAME
              value: 'api.notification-canada-ca.svc.cluster.local:6011'
            - name: AWS_REGION
              value: '$(AWS_REGION)'
            - name: AWS_ACCESS_KEY_ID
              value: '$(AWS_ACCESS_KEY_ID)'
            - name: AWS_SECRET_ACCESS_KEY
              value: '$(AWS_SECRET_ACCESS_KEY)'
            - name: AWS_ROUTE53_ZONE
              value: '$(AWS_ROUTE53_ZONE)'
            - name: AWS_SES_REGION
              value: '$(AWS_SES_REGION)'
            - name: AWS_SES_SMTP
              value: '$(AWS_SES_SMTP)'
            - name: AWS_SES_ACCESS_KEY
              value: '$(AWS_SES_ACCESS_KEY)'
            - name: AWS_SES_SECRET_KEY
              value: '$(AWS_SES_SECRET_KEY)'
            - name: DANGEROUS_SALT
              value: '$(DANGEROUS_SALT)'
            - name: DOCUMENT_DOWNLOAD_API_HOST
              value: 'http://document-download-api.notification-canada-ca.svc.cluster.local:7000'
            - name: FIDO2_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: FRESH_DESK_API_URL
              value: '$(FRESH_DESK_API_URL)'
            - name: FRESH_DESK_API_KEY
              value: '$(FRESH_DESK_API_KEY)'
            - name: MLWR_HOST
              value: '$(MLWR_HOST)'
            - name: MLWR_USER
              value: '$(MLWR_USER)'
            - name: MLWR_KEY
              value: '$(MLWR_KEY)'
            - name: NOTIFY_EMAIL_DOMAIN
              value: '$(BASE_DOMAIN)'
            - name: NOTIFY_ENVIRONMENT
              value: '$(ENVIRONMENT)'
            - name: NOTIFICATION_QUEUE_PREFIX
              value: 'eks-notification-canada-ca'
            - name: REDIS_URL
              value: redis://redis.notification-canada-ca.svc.cluster.local:6379
            - name: REDIS_ENABLED
              value: '1'
            - name: SECRET_KEY
              value: '$(SECRET_KEY)'
            - name: SENDGRID_API_KEY
              value: '$(SENDGRID_API_KEY)'
            - name: SQLALCHEMY_DATABASE_URI
              value: '$(POSTGRES_SQL)'
            - name: STATSD_HOST
              value: cloudwatch-agent-statsd.notification-canada-ca.svc.cluster.local
            - name: TWILIO_ACCOUNT_SID
              value: '$(TWILIO_ACCOUNT_SID)'
            - name: TWILIO_AUTH_TOKEN
              value: '$(TWILIO_AUTH_TOKEN)'
            - name: TWILIO_FROM_NUMBER
              value: '$(TWILIO_FROM_NUMBER)'
          resources: 
            requests:
              cpu: "500m"
              memory: "700Mi"
            limits:
              cpu: "1200m"
              memory: "900Mi"
          ports:
            - containerPort: 6011
          readinessProbe:
            httpGet:
              path: /
              port: 6011
            initialDelaySeconds: 5
            periodSeconds: 3
          livenessProbe:
            httpGet:
              path: /
              port: 6011
            initialDelaySeconds: 5
            periodSeconds: 3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
